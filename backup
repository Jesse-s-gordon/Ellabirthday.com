<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Ella's Birthday Pinterest Board</title>
  <link rel="stylesheet" href="style.css">
  <link href="https://fonts.googleapis.com/css2?family=Pacifico&family=Montserrat:wght@400;700&display=swap" rel="stylesheet">
</head>
<body>
  <nav class="navbar">
    <div class="nav-logo">üéâ EllasBirthday.com</div>
    <ul class="nav-links">
      <li id="nav-home">Home</li>
      <li id="nav-adventure">Adventure</li>
      <li>Pictures</li>
      <li>Blog</li>
      <li>About Me</li>
      <li>Portfolio</li>
    </ul>
    <div class="nav-search">
      <input type="text" placeholder="Search">
      <span class="search-icon">üîç</span>
    </div>
  </nav>
  <section id="intro-section" class="intro-section" style="display:none;">
    <div class="intro-photo-container">
      <img src="ella-intro.jpg" alt="Ella at counter" class="intro-photo">
      <div class="thought-bubble">I think I'm starting to like this game</div>
      <button id="intro-start-btn" class="start-btn">Start</button>
    </div>
  </section>
  <section id="home-section" class="home-section">
    <div class="home-left">
      <img src="ella-photo.jpg" alt="Ella smiling on a boat" class="ella-photo">
      <div class="love-message">Made with love from Toronto to Dallas üíå</div>
    </div>
    <div class="home-right">
      <h1 class="home-title">This is....<br>Ella's 22 Birthday</h1>
      <h2 class="home-subtitle easy-font">Buckle up Folks</h2>
      <p class="home-message">Welcome to EllasBirthday.com, here you will find a small treasure hunt filled with Ella-themed puzzles leading to your birthday present!<br><br>There are also some awesome pictures and memories along the way as well.<br>Enjoy, Diva,<br>Love you lots<br>- Jesse</p>
      <button id="start-adventure-btn" class="start-btn">Start the Adventure</button>
    </div>
  </section>
  <main id="masonry-board" class="masonry-board" style="display:none;">
    <section id="wordle-card" class="card wordle-card">
      <h2>Wordle Challenge</h2>
      <p>Guess the special 5-letter word!</p>
      <div id="wordle-placeholder">[Wordle game will appear here]</div>
    </section>
    <div id="wordle-simple-congrats" class="congrats-message" style="display:none; text-align:center;">
      <p>üéâ Good Job!!!</p>
      <button id="to-sudoku-btn-simple" class="next-btn">Next</button>
    </div>
    <section id="sudoku-card" class="card sudoku-card" style="display:none;">
      <h2>Sudoku Surprise</h2>
      <p>Solve the puzzle to reveal a secret message!</p>
      <div id="sudoku-placeholder">[Sudoku puzzle will appear here]</div>
      <div id="sudoku-congrats" class="congrats-message" style="display:none;">
        <p>üéâ Amazing! You cracked the Sudoku.<br>Ready for the next surprise?</p>
        <button id="to-paint-btn" class="next-btn">Next Challenge</button>
      </div>
    </section>
    <section id="paint-card" class="card paint-card" style="display:none;">
      <h2>Paint-by-Numbers</h2>
      <p>Reveal your concert surprise by painting the image!</p>
      <div id="paint-placeholder">[Paint-by-numbers will appear here]</div>
      <div id="paint-congrats" class="congrats-message" style="display:none;">
        <p>üéâ You finished the painting!<br>Get ready for your final surprise...</p>
        <button id="to-final-btn" class="next-btn">Final Reveal</button>
      </div>
    </section>
    <section class="card poem-card" id="final-reveal-card" style="display:none;">
      <h2>Final Riddle & Poem</h2>
      <p id="poem-placeholder">[A special poem and your present will appear here]</p>
    </section>
  </main>
  <script>
console.log('Birthday board script loaded!');

document.addEventListener('DOMContentLoaded', function() {
  // Elements
  const navHome = document.getElementById('nav-home');
  const navAdventure = document.getElementById('nav-adventure');
  const startBtn = document.getElementById('start-adventure-btn');
  const homeSection = document.getElementById('home-section');
  const board = document.getElementById('masonry-board');
  const wordleCard = document.getElementById('wordle-card');
  const sudokuCard = document.getElementById('sudoku-card');
  const paintCard = document.getElementById('paint-card');
  const wordlePlaceholder = document.getElementById('wordle-placeholder');
  const wordleCongrats = document.getElementById('wordle-congrats');
  const toSudokuBtn = document.getElementById('to-sudoku-btn');
  const sudokuCongrats = document.getElementById('sudoku-congrats');
  const toPaintBtn = document.getElementById('to-paint-btn');
  const introSection = document.getElementById('intro-section');
  const introStartBtn = document.getElementById('intro-start-btn');

  // Show home-section on Home tab click
  if (navHome && homeSection && board) {
    navHome.addEventListener('click', function() {
      homeSection.style.display = '';
      if (introSection) introSection.style.display = 'none';
      board.style.display = 'none';
      window.scrollTo({ top: 0, behavior: 'smooth' });
    });
  }

  // Show intro section on Adventure tab click
  if (navAdventure && homeSection && board && introSection) {
    navAdventure.addEventListener('click', function() {
      homeSection.style.display = 'none';
      introSection.style.display = '';
      board.style.display = 'none';
      window.scrollTo({ top: 0, behavior: 'smooth' });
    });
  }

  // Show board after Start is pressed in intro
  if (introSection && introStartBtn) {
    introStartBtn.addEventListener('click', function() {
      introSection.style.display = 'none';
      board.style.display = '';
      board.classList.add('active');
      wordleCard.style.display = 'flex';
      sudokuCard.style.display = 'none';
      paintCard.style.display = 'none';
      window.scrollTo({ top: 0, behavior: 'smooth' });
    });
  }

  // Remove/disable Start Adventure button logic
  if (startBtn) {
    startBtn.style.display = 'none';
    startBtn.disabled = true;
  }

  // --- Wordle Game ---
  const WORDLE_ANSWER = 'SMITS';
  const MAX_GUESSES = 6;

  function createWordleBoard() {
    let guesses = [];
    let currentGuess = '';
    let gameOver = false;
    let keyboardState = {};
    wordlePlaceholder.innerHTML = `
      <div class="wordle-board"></div>
      <div id="wordle-keyboard" class="wordle-keyboard"></div>
      <div id="wordle-message"></div>
    `;
    const boardDiv = wordlePlaceholder.querySelector('.wordle-board');
    const keyboardDiv = document.getElementById('wordle-keyboard');
    const message = document.getElementById('wordle-message');

    // NYT keyboard layout
    const keyboardRows = [
      ['Q','W','E','R','T','Y','U','I','O','P'],
      ['A','S','D','F','G','H','J','K','L'],
      ['Enter','Z','X','C','V','B','N','M','Back']
    ];

    function renderBoard() {
      boardDiv.innerHTML = '';
      for (let rowIdx = 0; rowIdx < MAX_GUESSES; rowIdx++) {
        const row = document.createElement('div');
        row.className = 'wordle-row';
        let guess = guesses[rowIdx];
        for (let i = 0; i < 5; i++) {
          const cell = document.createElement('span');
          cell.className = 'wordle-cell';
          if (guess) {
            cell.textContent = guess.word[i];
            // Set NYT-style data-state for coloring
            if (guess.colors[i] === '#2C5F2D' || guess.colors[i] === '#2563eb' || guess.colors[i] === '#6aaa64') {
              cell.setAttribute('data-state', 'correct');
            } else if (guess.colors[i] === '#FFD600' || guess.colors[i] === '#c9b458') {
              cell.setAttribute('data-state', 'present');
            } else {
              cell.setAttribute('data-state', 'absent');
            }
            if (guess.animated && guess.animated[i]) {
              cell.classList.add('flip');
            }
          } else if (rowIdx === guesses.length) {
            // Current guess row
            cell.textContent = currentGuess[i] || '';
          }
          row.appendChild(cell);
        }
        boardDiv.appendChild(row);
      }
    }

    function renderKeyboard() {
      if (gameOver) {
        keyboardDiv.innerHTML = '';
        return;
      }
      keyboardDiv.innerHTML = '';
      keyboardRows.forEach(row => {
        const rowDiv = document.createElement('div');
        rowDiv.className = 'keyboard-row';
        row.forEach(key => {
          const keyBtn = document.createElement('button');
          keyBtn.className = 'key-btn';
          keyBtn.textContent = key === 'Back' ? '‚å´' : key;
          keyBtn.setAttribute('data-key', key);
          // Color keys
          if (keyboardState[key]) {
            keyBtn.setAttribute('data-state', keyboardState[key]);
          }
          keyBtn.onclick = () => handleKey(key);
          rowDiv.appendChild(keyBtn);
        });
        keyboardDiv.appendChild(rowDiv);
      });
    }

    function updateKeyboardState(guess, colors) {
      for (let i = 0; i < 5; i++) {
        const letter = guess[i];
        let state = null;
        if (colors[i] === '#2C5F2D' || colors[i] === '#2563eb' || colors[i] === '#6aaa64') {
          state = 'correct';
        } else if (colors[i] === '#FFD600' || colors[i] === '#c9b458') {
          state = 'present';
        } else {
          state = 'absent';
        }
        // Only upgrade state (absent < present < correct)
        if (!keyboardState[letter] ||
            (keyboardState[letter] === 'absent' && state !== 'absent') ||
            (keyboardState[letter] === 'present' && state === 'correct')) {
          keyboardState[letter] = state;
        }
      }
    }

    function checkGuess(guess) {
      guess = guess.toUpperCase();
      let colors = Array(5).fill('#787c7e'); // NYT gray for wrong
      let answerArr = WORDLE_ANSWER.split('');
      let guessArr = guess.split('');
      // First pass: correct position
      for (let i = 0; i < 5; i++) {
        if (guessArr[i] === answerArr[i]) {
          colors[i] = '#6aaa64'; // NYT green
          answerArr[i] = null;
          guessArr[i] = null;
        }
      }
      // Second pass: right letter, wrong spot
      for (let i = 0; i < 5; i++) {
        if (guessArr[i] && answerArr.includes(guessArr[i])) {
          colors[i] = '#c9b458'; // NYT yellow
          answerArr[answerArr.indexOf(guessArr[i])] = null;
        }
      }
      return colors;
    }

    function handleKey(key) {
      if (gameOver) return;
      if (key === 'Enter') {
        if (currentGuess.length !== 5) {
          message.textContent = 'Please enter a 5-letter word.';
          renderBoard();
          return;
        }
        message.textContent = '';
        let colors = checkGuess(currentGuess);
        updateKeyboardState(currentGuess, colors);
        guesses.push({ word: currentGuess, colors, animated: [false, false, false, false, false] });
        renderKeyboard();
        animateReveal(guesses.length - 1, colors, () => {
          if (currentGuess === WORDLE_ANSWER) {
            gameOver = true;
            wordleCongrats.style.display = 'none';
            // Hide grid and keyboard
            if (wordlePlaceholder.querySelector('.wordle-board')) wordlePlaceholder.querySelector('.wordle-board').style.display = 'none';
            if (wordlePlaceholder.querySelector('#wordle-keyboard')) wordlePlaceholder.querySelector('#wordle-keyboard').style.display = 'none';
            // Immediately transition to Sudoku
            if (wordleCard && sudokuCard) {
              wordleCard.style.display = 'none';
              sudokuCard.style.display = 'flex';
              window.scrollTo({ top: 0, behavior: 'smooth' });
            }
            document.removeEventListener('keydown', wordleKeyListener);
          } else if (guesses.length >= MAX_GUESSES) {
            gameOver = true;
            message.textContent = `Out of guesses! The answer was ${WORDLE_ANSWER}.`;
            wordleCongrats.style.display = 'block';
          }
        });
        currentGuess = '';
        renderBoard();
      } else if (key === 'Back') {
        currentGuess = currentGuess.slice(0, -1);
        renderBoard();
      } else if (/^[A-Z]$/.test(key) && currentGuess.length < 5) {
        currentGuess += key;
        renderBoard();
      }
    }

    function animateReveal(rowIdx, colors, callback) {
      let i = 0;
      function flipNext() {
        if (!guesses[rowIdx]) return;
        guesses[rowIdx].animated = guesses[rowIdx].animated || [false, false, false, false, false];
        guesses[rowIdx].animated[i] = true;
        renderBoard();
        i++;
        if (i < 5) {
          setTimeout(flipNext, 320);
        } else {
          setTimeout(callback, 320);
        }
      }
      flipNext();
    }

    // Keyboard event listeners
    function wordleKeyListener(e) {
      if (gameOver) return;
      if (e.key === 'Enter') handleKey('Enter');
      else if (e.key === 'Backspace') handleKey('Back');
      else if (/^[a-zA-Z]$/.test(e.key)) handleKey(e.key.toUpperCase());
    }
    document.addEventListener('keydown', wordleKeyListener);

    renderBoard();
    renderKeyboard();
  }

  if (wordlePlaceholder) {
    createWordleBoard();
  }

  if (toSudokuBtn && sudokuCard && wordleCard) {
    toSudokuBtn.onclick = function() {
      wordleCard.style.display = 'none';
      sudokuCard.style.display = 'flex';
      window.scrollTo({ top: 0, behavior: 'smooth' });
    };
  }

  // --- Sudoku Implementation ---
  const sudokuPlaceholder = document.getElementById('sudoku-placeholder');
  // const sudokuCongrats = document.getElementById('sudoku-congrats'); // already declared above
  // const toPaintBtn = document.getElementById('to-paint-btn'); // already declared above
  // const paintCard = document.getElementById('paint-card'); // already declared above

  // Example Sudoku puzzle (medium, pre-filled for demo)
  // 0 = empty
  const sudokuPuzzle = [
    [0, 0, 0, 2, 6, 0, 7, 0, 1],
    [6, 8, 0, 0, 7, 0, 0, 9, 0],
    [1, 9, 0, 0, 0, 4, 5, 0, 0],
    [8, 2, 0, 1, 0, 0, 0, 4, 0],
    [0, 0, 4, 6, 0, 2, 9, 0, 0],
    [0, 5, 0, 0, 0, 3, 0, 2, 8],
    [0, 0, 9, 3, 0, 0, 0, 7, 4],
    [0, 4, 0, 0, 5, 0, 0, 3, 6],
    [7, 0, 3, 0, 1, 8, 0, 0, 0]
  ];
  // Solution for the above puzzle
  const sudokuSolution = [
    [4, 3, 5, 2, 6, 9, 7, 8, 1],
    [6, 8, 2, 5, 7, 1, 4, 9, 3],
    [1, 9, 7, 8, 3, 4, 5, 6, 2],
    [8, 2, 6, 1, 9, 5, 3, 4, 7],
    [3, 7, 4, 6, 8, 2, 9, 1, 5],
    [9, 5, 1, 7, 4, 3, 6, 2, 8],
    [5, 1, 9, 3, 2, 6, 8, 7, 4],
    [2, 4, 8, 9, 5, 7, 1, 3, 6],
    [7, 6, 3, 4, 1, 8, 2, 5, 9]
  ];
  // Highlighted cell indices (row, col) for the phrase (28 cells)
  const highlightOrder = [
    [0,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,8],
    [1,0],[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],
    [2,0],[2,1],[2,2],[2,3],[2,4],[2,5],[2,6],[2,7],[2,8],
    [3,0]
  ];

  function renderSudoku() {
    sudokuPlaceholder.innerHTML = '';
    const table = document.createElement('table');
    table.className = 'sudoku-table';
    for (let r = 0; r < 9; r++) {
      const tr = document.createElement('tr');
      for (let c = 0; c < 9; c++) {
        const td = document.createElement('td');
        td.className = 'sudoku-cell';
        // Check if this cell is highlighted for the phrase
        let highlightIdx = highlightOrder.findIndex(([hr, hc]) => hr === r && hc === c);
        if (highlightIdx !== -1) {
          td.classList.add('highlighted');
          td.setAttribute('data-highlight-idx', highlightIdx);
        }
        if (sudokuPuzzle[r][c] !== 0) {
          td.textContent = sudokuPuzzle[r][c];
          td.classList.add('prefilled');
        } else {
          const input = document.createElement('input');
          input.type = 'text';
          input.maxLength = 1;
          input.pattern = '[1-9]';
          input.className = 'sudoku-input';
          td.appendChild(input);
        }
        tr.appendChild(td);
      }
      table.appendChild(tr);
    }
    sudokuPlaceholder.appendChild(table);
    // Add legend and instructions
    const legend = document.createElement('div');
    legend.className = 'sudoku-legend';
    legend.innerHTML = `<b>Decoding Legend:</b><br>
      1=A, 2=B, 3=C, 4=D, 5=E, 6=F, 7=G, 8=H, 9=I, 10=J (1), 11=K (2), ...<br>
      <b>After solving, read the highlighted cells in order to decode your secret message!</b>`;
    sudokuPlaceholder.appendChild(legend);
    const instructions = document.createElement('div');
    instructions.className = 'sudoku-instructions';
    instructions.innerHTML = `<b>Instructions:</b> Solve the Sudoku. When finished, the highlighted cells (in order) will reveal a secret message. Use the legend to decode!`;
    sudokuPlaceholder.appendChild(instructions);
    // Add check button
    const checkBtn = document.createElement('button');
    checkBtn.textContent = 'Check Solution';
    checkBtn.className = 'next-btn';
    checkBtn.onclick = checkSudoku;
    sudokuPlaceholder.appendChild(checkBtn);
  }

  function checkSudoku() {
    const table = sudokuPlaceholder.querySelector('table');
    let correct = true;
    let highlights = [];
    for (let r = 0; r < 9; r++) {
      for (let c = 0; c < 9; c++) {
        const cell = table.rows[r].cells[c];
        let val;
        if (cell.classList.contains('prefilled')) {
          val = parseInt(cell.textContent);
        } else {
          val = parseInt(cell.querySelector('input').value);
        }
        if (val !== sudokuSolution[r][c]) {
          correct = false;
        }
        // Collect highlighted cell values
        if (cell.classList.contains('highlighted')) {
          highlights.push(val || 0);
        }
      }
    }
    if (correct) {
      sudokuCongrats.style.display = 'block';
      // Show the decoded message
      let decoded = highlights.map(n => {
        if (!n || n < 1 || n > 9) return '_';
        return String.fromCharCode(64 + n); // 1=A, 2=B, ...
      }).join('');
      sudokuCongrats.innerHTML += `<div class='decoded-message'><b>Your decoded message:</b><br>${decoded}</div>`;
    } else {
      alert('Not quite right yet! Double check your solution.');
    }
  }

  if (sudokuPlaceholder) {
    renderSudoku();
  }

  if (toPaintBtn && paintCard && sudokuCard) {
    toPaintBtn.onclick = function() {
      sudokuCard.style.display = 'none';
      paintCard.style.display = 'flex';
      window.scrollTo({ top: 0, behavior: 'smooth' });
    };
  }

  // Handle next button after Wordle congrats pic
  const toSudokuBtnSimple = document.getElementById('to-sudoku-btn-simple');
  if (toSudokuBtnSimple && sudokuCard && wordleCard) {
    toSudokuBtnSimple.onclick = function() {
      document.getElementById('wordle-simple-congrats').style.display = 'none';
      wordleCard.style.display = 'none';
      sudokuCard.style.display = 'flex';
      window.scrollTo({ top: 0, behavior: 'smooth' });
    };
  }
});
</script>
</body>
</html> 